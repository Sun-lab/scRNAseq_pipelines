
R version 3.6.0 (2019-04-26) -- "Planting of a Tree"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #this code try to reproduce the Velmeshev_2019_autism and reproduce their TSNE plots,
> 
> cur_k=17
> cur_file="rawMnorm5k"
> cor_thres=0.2
> file_label=paste0("k",cur_k,"_cor",cor_thres,"_",cur_file)
> #Data_PRJNA434002
> #install.packages("RSpectra")
> library("RSpectra")
> library("Rtsne")
> 
> 
> 
> 
> #setwd("~/Desktop/fh/1.Testing_scRNAseq/")
> #setwd("/Users/mzhang24/Desktop/fh/1.Testing_scRNAseq/")
> setwd("/fh/fast/sun_w/mengqi/1.Testing_scRNAseq/")
> 
> inputM=as.matrix(readRDS(paste0("../Data_PRJNA434002/",cur_file,".rds")))
> meta=read.table("../Data_PRJNA434002/meta.tsv",header = TRUE, sep = "\t")
> 
> 
> k = 50
> svd50=svds(inputM, k)
> #svd50=readRDS("../Data_PRJNA434002/svd50.rds")
> pdf(paste0("scree_plot_",file_label,".pdf"),width = 6,height = 6)
> plot(svd50$d^2/sum(svd50$d^2), xlim = c(0, k),ylim=c(0,0.01), type = "b", pch = 16, xlab = "principal components", 
+      ylab = "variance explained", main="scree plot")
> dev.off()
null device 
          1 
> 
> svd50$d^2/sum(svd50$d^2)
 [1] 0.9346095061 0.0292596995 0.0062669962 0.0045259548 0.0038345332
 [6] 0.0024907647 0.0021880069 0.0017045840 0.0014893711 0.0012933793
[11] 0.0009683509 0.0008423427 0.0007438331 0.0006940602 0.0005864974
[16] 0.0005675956 0.0005327811 0.0005029601 0.0004265396 0.0003991552
[21] 0.0003582755 0.0003505508 0.0003345535 0.0003116453 0.0003074664
[26] 0.0002951086 0.0002780407 0.0002644827 0.0002554577 0.0002348545
[31] 0.0002253525 0.0002163282 0.0002078238 0.0001969324 0.0001885933
[36] 0.0001836740 0.0001684381 0.0001635596 0.0001537596 0.0001500991
[41] 0.0001426281 0.0001374669 0.0001308037 0.0001294907 0.0001237026
[46] 0.0001190301 0.0001156637 0.0001118167 0.0001099969 0.0001074928
> 
> k=cur_k ###here should depend on the plots
> svd50v=svd50$v[,1:k]
> 
> xc=as.matrix(meta[,"Capbatch"])
> xs=as.matrix(meta[,"Seqbatch"])
> cor_c=matrix(ncol=1,nrow=k)
> cor_s=matrix(ncol=1,nrow=k)
> 
> for(ik in 1:k){
+   y=svd50v[,ik]
+   ##calculate correlation of capbatch
+   lmc = lm(y ~ as.factor(xc))
+   cor_c[ik]=summary(lmc)$r.square
+   ##calculate correlation of seqbatch
+   lms = lm(y ~ as.factor(xs))
+   cor_s[ik]=sqrt(summary(lms)$r.square)
+   
+ }
> 
> cor_s
            [,1]
 [1,] 0.06522155
 [2,] 0.19839367
 [3,] 0.06116884
 [4,] 0.05772516
 [5,] 0.04942718
 [6,] 0.18977250
 [7,] 0.07663572
 [8,] 0.01850684
 [9,] 0.09763361
[10,] 0.04256458
[11,] 0.08879977
[12,] 0.01283921
[13,] 0.08889927
[14,] 0.05183359
[15,] 0.07329547
[16,] 0.15252087
[17,] 0.04802039
> cor_c
             [,1]
 [1,] 0.035652658
 [2,] 0.150293210
 [3,] 0.010531893
 [4,] 0.031591441
 [5,] 0.004756288
 [6,] 0.096819231
 [7,] 0.007618569
 [8,] 0.007559300
 [9,] 0.010637390
[10,] 0.004025629
[11,] 0.014061483
[12,] 0.010257908
[13,] 0.022968260
[14,] 0.006701622
[15,] 0.010431259
[16,] 0.028955785
[17,] 0.006417450
> 
> #cor 0.2 threshold 
> flag=(abs(cor_c)<cor_thres & abs(cor_s)<cor_thres) 
> sum(flag)
[1] 17
> 
> cur_svd50v=svd50v[,flag==1]
> 
> #generate plotting color
> 
> library(RColorBrewer)
> color_type_num=apply(meta,2,function(x){return(length(table(as.factor(x))))})
> n=max(color_type_num[color_type_num<50])
> qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'seq',]
> col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
> 
> 
> 
> # ####This part is used for detecting which color provide more distinguish tSNE plots.####
> # tsne=Rtsne(cur_svd50v,dims=2, perplexity=15)
> #
> # pdf(paste0("tSNE_color_test_",cur_file,"_k=",cur_k,".pdf"),height = 8,width = 8)
> # for(i in 1:30){
> #   set.seed(i) #2,8,28
> #   cust_col=sample(col_vector, n)
> #   #pie(rep(1,n), col=cust_col)
> #   plot(tsne$Y, cex=.2,main=paste0("tSNE-cluster",i),col=cust_col[as.numeric(as.factor(meta[,"cluster"]))])
> # }
> # dev.off()
> 
> #Then,we choose seed 28 as the best choice for the color generation.
> # set.seed(28) #2,8,28
> # cust_col=sample(col_vector, n)
> cust_col=c("#023858", "#E31A1C", "#F768A1", "#BD0026", "#D4B9DA", "#7FCDBB", "#CE1256",
+            "#88419D", "#FDD0A2", "#4D004B", "#E7298A", "#78C679", "#D9F0A3", "#081D58", 
+            "#993404", "#CC4C02", "#FC9272", "#F7FCFD", "#BCBDDC", "#FFEDA0", "#FEE0D2",
+            "#D0D1E6", "#7F0000", "#FFF7F3", "#9E9AC8", "#FFFFD9", "#CCEBC5", "#FFFFE5",
+            "#014636", "#DADAEB", "#BFD3E6", "#FE9929", "#C994C7", "#FEE8C8", "#FCC5C0",
+            "#1D91C0", "#FCFBFD", "#225EA8", "#000000", "#FEC44F", "#41AE76")
>   
> #TSNE_plot is a function to do 2 pdf based tsne plots, designed especially for current situation.
> #example
> #tsne_obj=tsne
> #meta_info=meta
> #file_label="k17_cor0.2_3k10"
> 
> TSNE_plot=function(tsne_obj,meta_info,file_label){
+   
+   ncluster=length(as.character(unique(meta_info$cluster)))
+   
+   #find label location
+   medianY=matrix(ncol=2,nrow=ncluster)
+   for(i in 1:ncluster){
+     cur_cluster=as.character(unique(meta_info$cluster)[i])
+     cur_Y=tsne_obj$Y[(meta_info$cluster==cur_cluster),]
+     medianY[i,]=apply(cur_Y,2,median)
+   }
+   #plot compact tsne
+   pdf(paste0("tsne_plots_",file_label,".pdf"),height = 8,width = 8)
+   plot(tsne_obj$Y, cex=.2,main="tSNE-cluster",col=cust_col[as.numeric(as.factor(meta_info[,"cluster"]))])
+   for(i in 1:ncluster){
+     text(medianY[i,1],medianY[i,2],as.character(unique(meta_info$cluster)[i]))
+   }
+   plot(tsne_obj$Y, cex=.1,main="tSNE-Capbatch",col=cust_col[as.numeric(as.factor(meta_info[,"Capbatch"]))])
+   for(i in 1:ncluster){
+     text(medianY[i,1],medianY[i,2],as.character(unique(meta_info$cluster)[i]))
+   }
+   plot(tsne_obj$Y, cex=.1,main="tSNE-Seqbatch",col=cust_col[as.numeric(as.factor(meta_info[,"Seqbatch"]))])
+   for(i in 1:ncluster){
+     text(medianY[i,1],medianY[i,2],as.character(unique(meta_info$cluster)[i]))
+   }
+   plot(tsne_obj$Y, cex=.2,main="tSNE-individual",col=cust_col[as.numeric(as.factor(meta_info[,"individual"]))])
+   for(i in 1:ncluster){
+     text(medianY[i,1],medianY[i,2],as.character(unique(meta_info$cluster)[i]))
+   }
+   dev.off()
+   
+   #plot each sub tSNE
+   pdf(paste0("tSNE_sub_cluster_",file_label,".pdf"),height = 15,width = 30)
+   op=par(mfrow=c(3,6),mar=c(3, 3, 1, 1), bty="n",cex=0.9)
+   for(i in 1:ncluster){
+     cur_cluster=as.character(unique(meta_info$cluster)[i])
+     metaflag=(meta_info$cluster==cur_cluster)
+     #pie(rep(1,n), col=cust_col)
+     plot(tsne_obj$Y, cex=.2,main=paste0("tSNE-cluster",cur_cluster),col=cust_col[as.numeric(as.factor(metaflag))*13+6])
+   }
+   par(op)
+   dev.off()
+ }
> 
> tsne=Rtsne(cur_svd50v,dims=2, perplexity=30)
> saveRDS(tsne,paste0("tsne_",cur_file,"_k",cur_k,"_cor",cor_thres,"_30.rds"))
> TSNE_plot(tsne,meta,paste0(cur_file,"_k",cur_k,"_cor",cor_thres,"_30"))
null device 
          1 
> 
> 
> sessionInfo()
R version 3.6.0 (2019-04-26)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 14.04.5 LTS

Matrix products: default
BLAS/LAPACK: /app/easybuild/software/OpenBLAS/0.2.18-GCC-5.4.0-2.26-LAPACK-3.6.1/lib/libopenblas_prescottp-r0.2.18.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] RColorBrewer_1.1-2 Rtsne_0.15         RSpectra_0.14-0   

loaded via a namespace (and not attached):
[1] compiler_3.6.0  Matrix_1.2-17   Rcpp_1.0.1      grid_3.6.0     
[5] lattice_0.20-38
> q(save="no")
> proc.time()
    user   system  elapsed 
1056.170   15.764 1074.550 
