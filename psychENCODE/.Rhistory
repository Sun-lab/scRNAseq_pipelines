local_counts_fn  = file.path(psychENCODE_dir, "DER-22_Single_cell_expression_raw_UMI.tsv")
repo_dir  = "~/scRNAseq_pipelines"
work_dir  = file.path(repo_dir,"psychENCODE")
psychENCODE_dir = "~/psychENCODE_data"
local_counts_fn  = file.path(psychENCODE_dir, "DER-22_Single_cell_expression_raw_UMI.tsv")
online_counts_fn = "http://resource.psychencode.org/Datasets/Derived/SC_Decomp/DER-22_Single_cell_expression_raw_UMI.tsv"
if (file.exists(local_counts_fn)) {
counts = fread(local_counts_fn, data.table = FALSE)
} else {
counts = fread(online_counts_fn, data.table = FALSE)
}
bio_packs = c("SingleCellExperiment","DropletUtils","biomaRt",
"scater","scran","limma","org.Hs.eg.db")
source("https://bioconductor.org/biocLite.R")
for(pack1 in bio_packs){
if( !pack1 %in% installed.packages()[,"Package"]){
biocLite(pack1, suppressUpdates = TRUE)
}
}
cran_packs = c("data.table","svd","Rtsne","stringi","irlba")
for(pack1 in cran_packs){
if( !pack1 %in% installed.packages()[,"Package"]){
install.packages(pack1)
}
}
library(data.table)
library(SingleCellExperiment)
library(DropletUtils)
library(biomaRt)
library(scater)
library(scran)
library(limma)
library(ggplot2)
local_counts_fn  = file.path(psychENCODE_dir, "DER-22_Single_cell_expression_raw_UMI.tsv")
online_counts_fn = "http://resource.psychencode.org/Datasets/Derived/SC_Decomp/DER-22_Single_cell_expression_raw_UMI.tsv"
if (file.exists(local_counts_fn)) {
counts = fread(local_counts_fn, data.table = FALSE)
} else {
counts = fread(online_counts_fn, data.table = FALSE)
}
dim(counts); counts[1:3,1:2]
rownames(counts) = counts$V1
counts = as.matrix(counts[,-1])
colnames(counts)[1:10]
part_cell_id = sapply(colnames(counts),
function(xx) strsplit(xx,".",fixed=TRUE)[[1]][1],
USE.NAMES=FALSE)
col_dat = data.frame(sample_name = colnames(counts),
part_cell_id = part_cell_id,
stringsAsFactors = FALSE)
col_dat[1:5,]
local_counts_fn  = file.path(psychENCODE_dir, "DER-22_Single_cell_expression_raw_UMI.tsv")
online_counts_fn = "http://resource.psychencode.org/Datasets/Derived/SC_Decomp/DER-22_Single_cell_expression_raw_UMI.tsv"
if (file.exists(local_counts_fn)) {
counts = fread(local_counts_fn, data.table = FALSE)
} else {
counts = fread(online_counts_fn, data.table = FALSE)
}
dim(counts); counts[1:3,1:2]
rownames(counts) = counts$V1
counts = as.matrix(counts[,-1])
colnames(counts)[1:10]
part_cell_id = sapply(colnames(counts),
function(xx) strsplit(xx,".",fixed=TRUE)[[1]][1],
USE.NAMES=FALSE)
table(part_cell_id)
col_dat = data.frame(sample_name = colnames(counts),
part_cell_id = part_cell_id,
stringsAsFactors = FALSE)
col_dat[1:5,]
table(part_cell_id)
which(grep("V10", colnames(counts)))
grep("V10", colnames(counts))
dim(counts)
counts = fread(local_counts_fn)
counts[1:5,1:5]
counts[1:5,1:20]
counts[1:5,1:30]
counts[1:5,6514]
local_counts_fn  = file.path(psychENCODE_dir, "DER-22_Single_cell_expression_raw_UMI.tsv")
online_counts_fn = "http://resource.psychencode.org/Datasets/Derived/SC_Decomp/DER-22_Single_cell_expression_raw_UMI.tsv"
if (file.exists(local_counts_fn)) {
counts = fread(local_counts_fn, data.table = FALSE)
} else {
counts = fread(online_counts_fn, data.table = FALSE)
}
dim(counts); counts[1:3,1:2]
rownames(counts) = counts$V1
counts = as.matrix(counts[,-1])
colnames(counts)[1:10]
# Parse cell ID. Since we used data.table() to read the table as data.table, it has automatically parsed the cell types.
# We need to parse it back as:
# Ex3e.2 -> Ex3e, V2898 -> NA
part_cell_id = sapply(colnames(counts),
function(xx) strsplit(xx,".",fixed=TRUE)[[1]][1],
USE.NAMES=FALSE)
part_cell_id[grep("^V", part_cell_id)] = NA
table(part_cell_id)
col_dat = data.frame(sample_name = colnames(counts),
part_cell_id = part_cell_id,
stringsAsFactors = FALSE)
col_dat[1:5,]
