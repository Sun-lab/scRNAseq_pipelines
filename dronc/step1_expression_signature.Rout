
R version 3.5.0 (2018-04-23) -- "Joy in Playing"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> repo_dir  = "~/research/GitHub/scRNAseq_pipelines"
> work_dir  = file.path(repo_dir,"dronc")
> 
> dronc_dir = "~/research/scRNAseq/data/GTEx_droncseq_hip_pcf"
> setwd(dronc_dir)
> 
> # ------------------------------------------------------------------
> # here are the cell types 
> # ------------------------------------------------------------------
> 
> # exPFC, glutamatergic neurons from the PFC; 
> # GABA, GABAergic interneurons; 
> # exCA1/3, pyramidal neurons from the hip CA region; 
> # exDG, granule neurons from the hip dentate gyrus region; 
> # ASC, astrocytes; 
> # MG, microglia; 
> # ODC, oligodendrocytes; 
> # OPC, oligodendrocyte precursor cells; 
> # NSC, neuronal stem cells; 
> # SMC, smooth muscle cells; 
> # END, endothelial cells
> 
> # ------------------------------------------------------------------
> # load clustering results 
> # ------------------------------------------------------------------
> 
> sce      = readRDS("sce.rds")
> clusters = readRDS("all_clust_res.rds")
> 
> dim(sce)
Loading required package: SingleCellExperiment
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colMeans,
    colnames, colSums, dirname, do.call, duplicated, eval, evalq,
    Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply,
    lengths, Map, mapply, match, mget, order, paste, pmax, pmax.int,
    pmin, pmin.int, Position, rank, rbind, Reduce, rowMeans, rownames,
    rowSums, sapply, setdiff, sort, table, tapply, union, unique,
    unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply

[1] 10607 13181
Warning messages:
1: package ‘GenomicRanges’ was built under R version 3.5.1 
2: package ‘DelayedArray’ was built under R version 3.5.1 
> dim(colData(sce))
[1] 13181    66
> 
> dim(clusters)
[1] 13181    25
> clusters[1:2,]
           Cell.ID sc3_10_clusters sc3_12_clusters      sample_name
1 hCc_AAAAAGCTACAA               3               1 hCc_AAAAAGCTACAA
2 hCc_AAACAGGTGAGG               1               1 hCc_AAACAGGTGAGG
  part_cell_id Habib_TSNE1 Habib_TSNE2 log10_total_features Habib_clusters
1          hCc    2.804881   -1.888592             2.866287              1
2          hCc   16.965708   -6.768078             3.170262              5
  Habib_clusters_name Habib_cell_type   HVG_PC1   HVG_PC2 HVG_TSNE1 HVG_TSNE2
1              exPFC1           exPFC -3.809914 -1.148090 -2.054991  6.697855
2               GABA1            GABA -3.041883 -1.756074 -9.557901 20.722796
  KM_11 KM_12 KM_13 KM_14 KM_15 Cluster.Name nGenes nTranscripts Cluster.ID
1     7     2     5    14     9       exPFC1    736         1034          1
2     5     7    10     9     8        GABA1   1480         2391          5
  Cell_Type
1     exPFC
2      GABA
> 
> t1 = table(clusters$part_cell_id, clusters$Cell_Type)
> t2 = table(clusters$part_cell_id, clusters$Cluster.ID)
> t1
              
               ASC END exCA1 exCA3 exDG exPFC GABA  MG NSC ODC OPC
  hCc           48   1     2     3    1   473  164   6   0  22  37
  hCd           60   2     2     6    1   465  174   6   0  26  25
  hCe           47   0     5     3    1   440  162   2   0  17  17
  hCf           48   2     5     4    1   459  166   3   0  25  25
  hHP1          67   5    36    50   24    27   44  18   0 104  16
  hHP2          38   2    16    41   18    15   30   8   0  71   4
  hHP2a         13   1     8    16    5    16   18   3   0  25   2
  hHP2b         20   1     6    35    8    13   21   3   0  22   1
  hHP2c         15   0     9    25    3    10    8   2   0   9   1
  hHP3b          3   0     0    12    1     3   13   0   0   1   1
  HP2-A        108   0    62    56   90    25   45   6  12  92  15
  HP2-B         90   0    66    56  110    12   61   5  20  85  11
  HP3-A        118   5    44    91   41    13   26  42   5 326  55
  HP3-B        122   5    35   126   40    11   33  41   4 321  57
  HP3-B-united 148   9    44   148   52    14   39  52   5 391  63
  humanPFCa     58   1     0     2    0   428  170   5   0  26  32
  humanPFCb     45   3     1     3    1   392  128   4   0  34  20
  PFC-CD        70   6     2     7    0   497  178   7   0  46  33
  PFC2-A1      162  15    12    20  277     8   52  25  28 339  41
  PFC2-A2      135  10    18    12  242     7   44  17  27 281  44
  PFC2-A3      175   9    13    11  289     8   47  22  34 307  67
  PFC2-A5       69   6     4    10  216     5   23   4  26  69  11
> t2
              
                 1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16
  hCc          466   7   2   3  98  66   1  40   8  13   9  37   6   0   1   9
  hCd          458   7   2   6 104  70   1  45  15  17   9  25   6   0   2  10
  hCe          335 105   5   3  83  79   1  39   8  13   4  17   2   0   0   5
  hCf          346 113   5   4 102  64   1  34  14  17   8  25   3   0   2   7
  hHP1          16  11  36  50  22  22  24  62   5  37  67  16  18   0   5   0
  hHP2           9   6  16  41  19  11  18  31   7  33  38   4   8   0   2   0
  hHP2a         16   0   8  16  11   7   5  11   2  10  15   2   3   0   1   0
  hHP2b         11   2   6  35   8  13   8  16   4   9  13   1   3   0   1   0
  hHP2c          8   2   9  25   5   3   3  13   2   6   3   1   2   0   0   0
  hHP3b          3   0   0  12   7   6   1   2   1   1   0   1   0   0   0   0
  HP2-A         22   3  62  56  30  15  90  71  37  32  60  15   6  12   0   1
  HP2-B          9   3  66  56  39  22 110  52  38  34  51  11   5  20   0   1
  HP3-A         10   3  44  91   6  20  41 106  12 204 122  55  42   5   5   0
  HP3-B          8   3  35 126  12  21  40 105  17 205 116  57  41   4   5   1
  HP3-B-united  11   3  44 148  14  25  52 127  21 251 140  63  52   5   9   1
  humanPFCa    423   5   0   2 103  67   0  52   6  16  10  32   5   0   1  10
  humanPFCb    388   4   1   3  67  61   1  35  10  20  14  20   4   0   3   9
  PFC-CD       487  10   2   7 106  72   0  55  15  30  16  33   7   0   6  19
  PFC2-A1        6   2  12  20  14  38 277  55 107 185 154  41  25  28  15   0
  PFC2-A2        6   1  18  12  12  32 242  42  93 154 127  44  17  27  10   1
  PFC2-A3        5   3  13  11   8  39 289  60 115 173 134  67  22  34   9   0
  PFC2-A5        5   0   4  10   4  19 216  25  44  24  45  11   4  26   6   0
              
                18
  hCc            1
  hCd            3
  hCe            3
  hCf            2
  hHP1           5
  hHP2           3
  hHP2a          1
  hHP2b          0
  hHP2c          1
  hHP3b          1
  HP2-A         16
  HP2-B         18
  HP3-A         34
  HP3-B         30
  HP3-B-united  33
  humanPFCa      2
  humanPFCb      1
  PFC-CD         4
  PFC2-A1        3
  PFC2-A2        4
  PFC2-A3        3
  PFC2-A5        3
> 
> setwd(work_dir)
> 
> pdf("figure/part_cell_id_vs_cell_type.pdf", width=5, height=5)
> heatmap(t1)
> dev.off()
null device 
          1 
> 
> # ------------------------------------------------------------------
> # We want to separate the clusters from PFC versus hippocampus. 
> # The paper did not provide such label for each cell. 
> # Based on supp. Fig 7d, and the part_cell_id, I identify the 
> # following part_cell_id as cells from PFC. 
> # ------------------------------------------------------------------
> 
> PFC = c("hCc", "hCd", "hCe", "hCf", "humanPFCa", "humanPFCb", "PFC-CD")
> 
> # ------------------------------------------------------------------
> # Compare the results of kmeans 12 vs. 15 clusters, when 
> # there are 12 clusters, they already capture cell type-specific
> # infomration. 15 clusters further split clusters for a few 
> # cell types. so we choose kmeans 12 clusters. 
> # 
> # For each cell type, find the largest cluster
> # ------------------------------------------------------------------
> 
> t1 = table(clusters$KM_15, clusters$Cell_Type)
> t1
    
      ASC  END exCA1 exCA3 exDG exPFC GABA   MG  NSC  ODC  OPC
  1   787    3     6     1    0    46    6    9    5    5    2
  2     0    0     0     0    0     0    0    0  144    0    0
  3   455    0     1     0    0     7    0    2    1    0    1
  4     0   68     0     0    0     0    1    0    0    0    0
  5    13    0     8     3    4    43    5   16    0 1172    4
  6     4    0     0     0    0     5    0    1    0  676    5
  7     0    0     0     0    0     5    0    2    0    2  520
  8     1    1     4     4    0    18 1153    0    0    6    3
  9    33    6    76    76   15  3107  440   16    0   25   20
  10    2    1   118   630   23    53   37    4    1    1    2
  11   10    1   177    23 1379    37    4   10    7    8    5
  12    0    0     0     0    0     2    0  219    0    1    0
  13    5    1     0     0    0    13    0    1    0  740    0
  14    0    0     0     0    0     0    0    0    0    3   15
  15  349    2     0     0    0     5    0    1    3    0    1
> 
> t1 = table(clusters$KM_12, clusters$Cell_Type)
> t1
    
      ASC  END exCA1 exCA3 exDG exPFC GABA   MG  NSC  ODC  OPC
  1   518    1     0     0    0    10    0    2    2    0    1
  2    34    6    76    76   15  3107  443   18    0   26   20
  3     3    1   118   630   23    53   37    4    1    1    2
  4     0   68     0     0    0     0    1    0    0    0    0
  5     5    0     0     0    0     6    0    1    0  893    5
  6  1066    2     7     1    0    46    4    9    7    7    3
  7     2    1     5     4    0    20 1154    0    0    5    3
  8     1    1     0     0    0     5    0    1    0    6  533
  9    11    2   179    23 1380    38    4    9    6   10    5
  10    0    0     0     0    0     2    0  223    0    2    0
  11    0    0     0     0    0     0    0    0  145    0    0
  12   19    1     5     3    3    54    3   14    0 1689    6
> 
> clusters$cluster_kmean = clusters$KM_12
> clusts = apply(t1, 2, function(v){union(which.max(v), which(v > 500))})
> clusts
$ASC
[1] 6 1

$END
[1] 4

$exCA1
[1] 9

$exCA3
[1] 3

$exDG
[1] 9

$exPFC
[1] 2

$GABA
[1] 7

$MG
[1] 10

$NSC
[1] 11

$ODC
[1] 12  5

$OPC
[1] 8

> 
> # ------------------------------------------------------------------
> # align cells of sce object and cells of cluster results
> # ------------------------------------------------------------------
> 
> colData(sce)[1:2,1:3]
DataFrame with 2 rows and 3 columns
                        sample_name part_cell_id Habib_clusters
                        <character>  <character>       <factor>
hHP1_AACACTATCTAC hHP1_AACACTATCTAC         hHP1              4
hHP1_CTACGCATCCAT hHP1_CTACGCATCCAT         hHP1              3
> rownames(colData(sce))[1:2]
[1] "hHP1_AACACTATCTAC" "hHP1_CTACGCATCCAT"
> table(clusters$Cell.ID == rownames(colData(sce)))

FALSE 
13181 
> setequal(clusters$Cell.ID, rownames(colData(sce)))
[1] TRUE
> 
> mat1 = match(rownames(colData(sce)), clusters$Cell.ID)
> clusters = clusters[mat1,]
> table(clusters$Cell.ID == rownames(colData(sce)))

 TRUE 
13181 
> 
> # ------------------------------------------------------------------
> # collect counts for each cell type
> # ------------------------------------------------------------------
> 
> celltypes = na.omit(unique(clusters$Cell_Type))
> celltypes
 [1] "exCA3" "exCA1" "exPFC" "ASC"   "GABA"  "ODC"   "exDG"  "END"   "MG"   
[10] "OPC"   "NSC"  
attr(,"na.action")
[1] 8
attr(,"class")
[1] "omit"
> 
> zeros  = rep(0,length(celltypes))
> nCells = data.frame(Cell_Type=celltypes, nCells_All=zeros, nCells_PFC=zeros)
> 
> ct.matrx = ct.matrx.PFC = matrix(NA, nrow=nrow(sce), ncol=length(celltypes))
> colnames(ct.matrx) = colnames(ct.matrx.PFC) = celltypes
> rownames(ct.matrx) = rownames(ct.matrx.PFC) = rowData(sce)$external_gene_name
> 
> for(ct1 in celltypes){
+   ct.cond    = clusters$Cell_Type == ct1
+   clust.cond = clusters$cluster_kmean %in% clusts[[ct1]]
+   samp.cond  = clusters$part_cell_id %in% PFC
+   
+   cells      = which(ct.cond & clust.cond)
+   cells.PFC  = which(ct.cond & clust.cond & samp.cond)
+   
+   nCells[which(nCells$Cell_Type==ct1),2] = length(cells)
+   nCells[which(nCells$Cell_Type==ct1),3] = length(cells.PFC)
+   
+   ct.matrx[,ct1]  = rowSums(counts(sce)[,cells])
+   ct.matrx.PFC[,ct1]  = rowSums(counts(sce)[,cells.PFC])
+ }
> 
> dim(ct.matrx)
[1] 10607    11
> ct.matrx[1:2,1:3]
            exCA3 exCA1 exPFC
AC004893.11    12     1    54
ABCA5         131    42  1094
> 
> dim(ct.matrx.PFC)
[1] 10607    11
> ct.matrx.PFC[1:2,1:3]
            exCA3 exCA1 exPFC
AC004893.11     0     0    54
ABCA5           0     0  1083
> 
> summary(ct.matrx)
     exCA3               exCA1              exPFC               ASC           
 Min.   :     0.00   Min.   :    0.00   Min.   :     0.0   Min.   :     0.00  
 1st Qu.:    14.00   1st Qu.:    6.00   1st Qu.:    98.0   1st Qu.:    17.00  
 Median :    29.00   Median :   12.00   Median :   185.0   Median :    34.00  
 Mean   :    70.63   Mean   :   23.68   Mean   :   381.2   Mean   :    82.16  
 3rd Qu.:    58.00   3rd Qu.:   23.00   3rd Qu.:   360.0   3rd Qu.:    67.00  
 Max.   :117962.00   Max.   :28514.00   Max.   :460080.0   Max.   :158523.00  
      GABA               ODC                exDG               END          
 Min.   :     0.0   Min.   :     0.0   Min.   :     0.0   Min.   :   0.000  
 1st Qu.:    31.0   1st Qu.:    18.0   1st Qu.:    33.0   1st Qu.:   0.000  
 Median :    59.0   Median :    43.0   Median :    67.0   Median :   1.000  
 Mean   :   115.4   Mean   :   112.4   Mean   :   146.2   Mean   :   4.108  
 3rd Qu.:   112.0   3rd Qu.:    92.0   3rd Qu.:   134.0   3rd Qu.:   4.000  
 Max.   :127069.0   Max.   :160362.0   Max.   :205965.0   Max.   :6686.000  
       MG                 OPC                NSC          
 Min.   :    0.000   Min.   :    0.00   Min.   :    0.00  
 1st Qu.:    1.000   1st Qu.:    5.00   1st Qu.:    3.00  
 Median :    3.000   Median :   10.00   Median :    7.00  
 Mean   :    7.761   Mean   :   20.41   Mean   :   15.36  
 3rd Qu.:    7.000   3rd Qu.:   20.00   3rd Qu.:   14.00  
 Max.   :12101.000   Max.   :17865.00   Max.   :15946.00  
> summary(ct.matrx.PFC)
     exCA3              exCA1       exPFC               ASC         
 Min.   :  0.0000   Min.   :0   Min.   :     0.0   Min.   :    0.0  
 1st Qu.:  0.0000   1st Qu.:0   1st Qu.:    97.0   1st Qu.:    3.0  
 Median :  0.0000   Median :0   Median :   183.0   Median :    7.0  
 Mean   :  0.6332   Mean   :0   Mean   :   377.6   Mean   :   16.6  
 3rd Qu.:  1.0000   3rd Qu.:0   3rd Qu.:   357.0   3rd Qu.:   14.0  
 Max.   :704.0000   Max.   :0   Max.   :454852.0   Max.   :28486.0  
      GABA               ODC                exDG        END          
 Min.   :    0.00   Min.   :   0.000   Min.   :0   Min.   :  0.0000  
 1st Qu.:   18.00   1st Qu.:   1.000   1st Qu.:0   1st Qu.:  0.0000  
 Median :   35.00   Median :   2.000   Median :0   Median :  0.0000  
 Mean   :   68.88   Mean   :   6.351   Mean   :0   Mean   :  0.4688  
 3rd Qu.:   67.00   3rd Qu.:   6.000   3rd Qu.:0   3rd Qu.:  0.0000  
 Max.   :74802.00   Max.   :8477.000   Max.   :0   Max.   :431.0000  
       MG                OPC                NSC   
 Min.   :  0.0000   Min.   :   0.000   Min.   :0  
 1st Qu.:  0.0000   1st Qu.:   1.000   1st Qu.:0  
 Median :  0.0000   Median :   3.000   Median :0  
 Mean   :  0.6227   Mean   :   5.821   Mean   :0  
 3rd Qu.:  1.0000   3rd Qu.:   6.000   3rd Qu.:0  
 Max.   :799.0000   Max.   :5654.000   Max.   :0  
> 
> dim(nCells)
[1] 11  3
> nCells
   Cell_Type nCells_All nCells_PFC
1      exCA3        630          8
2      exCA1        179          0
3      exPFC       3107       3072
4        ASC       1584        339
5       GABA       1154        758
6        ODC       2582        167
7       exDG       1380          0
8        END         68          8
9         MG        223         19
10       OPC        533        165
11       NSC        145          0
> 
> # ------------------------------------------------------------------
> # save count data
> # ------------------------------------------------------------------
> 
> setwd(work_dir)
> 
> geneInfo = as.data.frame(rowData(sce))
> dim(geneInfo)
[1] 10607    21
> geneInfo[1:2,]
  hgnc_symbol ensembl_gene_id external_gene_name chromosome_name start_position
1             ENSG00000242687        AC004893.11               7       98610788
2       ABCA5 ENSG00000154265              ABCA5              17       67240452
  end_position strand_n
1     98645863        1
2     67323385       -1
                                                                      description
1                                                                                
2 ATP-binding cassette, sub-family A (ABC1), member 5 [Source:HGNC Symbol;Acc:35]
  percentage_gene_gc_content   gene_biotype is_feature_control
1                      46.84      antisense              FALSE
2                      34.61 protein_coding              FALSE
  is_feature_control_Mt is_feature_control_Ri mean_counts log10_mean_counts
1                 FALSE                 FALSE  0.01550491       0.006682028
2                 FALSE                 FALSE  0.19875693       0.078731132
  n_cells_by_counts pct_dropout_by_counts total_counts log10_total_counts
1               216              98.55644          232           2.367356
2              2327              84.44831         2974           3.473487
  n_cells_counts pct_dropout_counts
1            216           98.55644
2           2327           84.44831
> 
> ct.matrx = list(all=ct.matrx, PFC=ct.matrx.PFC)
> 
> saveRDS(geneInfo, "gene_info_dronc.rds")
> saveRDS(ct.matrx, "ct_matrix_dronc.rds")
> saveRDS(nCells,   "ct_cells_dronc.rds")
> 
> sessionInfo()
R version 3.5.0 (2018-04-23)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS  10.14.2

Matrix products: default
BLAS: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRblas.0.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats4    stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] SingleCellExperiment_1.2.0  SummarizedExperiment_1.10.1
 [3] DelayedArray_0.6.4          BiocParallel_1.14.2        
 [5] matrixStats_0.54.0          Biobase_2.40.0             
 [7] GenomicRanges_1.32.6        GenomeInfoDb_1.16.0        
 [9] IRanges_2.14.10             S4Vectors_0.18.3           
[11] BiocGenerics_0.26.0        

loaded via a namespace (and not attached):
 [1] lattice_0.20-35        bitops_1.0-6           grid_3.5.0            
 [4] zlibbioc_1.26.0        XVector_0.20.0         Matrix_1.2-14         
 [7] tools_3.5.0            RCurl_1.95-4.11        compiler_3.5.0        
[10] GenomeInfoDbData_1.1.0
> q(save="no")
> proc.time()
   user  system elapsed 
 28.564  12.765  41.398 
